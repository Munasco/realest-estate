{"version":3,"sources":["containers/Contact.js"],"names":["connect","setAlert","useEffect","window","scrollTo","useState","name","email","subject","message","formData","setFormData","loading","setLoading","onChange","e","target","value","className","content","onSubmit","preventDefault","axios","defaults","headers","post","then","res","console","log","data","catch","errors","htmlFor","type","placeholder","required","cols","row","color","height","width","htmltype"],"mappings":"mNAwFeA,sBAAQ,KAAM,CAACC,cAAfD,EAhFf,YAA8B,IAAZC,EAAW,EAAXA,SAEdC,qBAAU,WACNC,OAAOC,SAAS,EAAE,KACnB,IAJsB,MAMOC,mBAAS,CACrCC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,KAVY,mBAMlBC,EANkB,KAMRC,EANQ,KAYlBL,EAAiCI,EAAjCJ,KAAMC,EAA2BG,EAA3BH,MAAOC,EAAoBE,EAApBF,QAASC,EAAWC,EAAXD,QAZJ,EAcKJ,oBAAS,GAdd,mBAclBO,EAdkB,KAcTC,EAdS,KAgBnBC,EAAW,SAAAC,GAAC,OAAIJ,EAAY,2BAC3BD,GAD0B,kBACfK,EAAEC,OAAOV,KAAOS,EAAEC,OAAOC,UAyB3C,OACI,yBAAKC,UAAU,WACX,kBAAC,IAAD,KACI,2DACA,0BAAMZ,KAAK,cAAca,QAAQ,gBAErC,0BAAMD,UAAU,gBAAgBE,SA5BvB,SAAAL,GACbA,EAAEM,iBACFC,IAAMC,SAASC,QAAU,CACrB,eAAgB,oBAEpBX,GAAW,GACXS,IAAMG,KAAK,oCAAqC,CAACnB,OACjDC,QAAOC,UAASC,YACfiB,MAAK,SAAAC,GACF1B,EAAS,eAAgB,WACzBY,GAAW,GACXe,QAAQC,IAAIF,EAAIG,MAChB3B,OAAOC,SAAS,EAAE,MAErB2B,OAAM,SAAAC,GACH/B,EAAS,6BAA8B,SACvCY,GAAW,GACXV,OAAOC,SAAS,EAAE,QAYd,2BAAO6B,QAAQ,OAAOf,UAAU,wBAAhC,SACA,2BAAOgB,KAAK,OAAM5B,KAAK,OAAM6B,YAAY,YAAWrB,SAAUA,EAC9DG,MAAOX,EAAM8B,UAAQ,EAAClB,UAAU,yBAChC,2BAAOe,QAAQ,QAAQf,UAAU,wBAAjC,UACA,2BAAOgB,KAAK,QAAQ5B,KAAK,QAAO6B,YAAY,oBAAoBrB,SAAUA,EAC1EG,MAAOV,EAAO6B,UAAQ,EAAClB,UAAU,yBACjC,2BAAOe,QAAQ,UAAUf,UAAU,wBAAnC,YACA,2BAAOgB,KAAK,OAAO5B,KAAK,UAAU6B,YAAY,cAAarB,SAAUA,EACrEG,MAAOT,EAAS4B,UAAQ,EAAClB,UAAU,yBACnC,2BAAOe,QAAQ,UAAUf,UAAU,wBAAnC,YACA,8BAAUZ,KAAK,UAAU+B,KAAK,KAAKC,IAAI,KACvCH,YAAY,WAAWrB,SAAUA,EACjCG,MAAOR,EAASS,UAAU,4BACzBN,EACD,yBAAKM,UAAU,0BACX,kBAAC,IAAD,CAAQgB,KAAK,OACLK,MAAM,UACNC,OAAQ,GACRC,MAAO,MAEnB,4BAAQC,SAAS,SAASxB,UAAU,yBAApC","file":"static/js/9.31bf7cb7.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport {Helmet} from 'react-helmet'\r\nimport { connect } from 'react-redux'\r\nimport Loader from 'react-loader-spinner'\r\nimport PropTypes from 'prop-types'\r\nimport {setAlert} from '../actions/alert'\r\n\r\nfunction Contact({setAlert}) {\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0)\r\n    }, [])\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        subject: '',\r\n        message: ''\r\n    })\r\n    const {name, email, subject, message} = formData;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onChange = e => setFormData({\r\n        ...formData, [e.target.name]: e.target.value\r\n    })\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        axios.defaults.headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n        setLoading(true);\r\n        axios.post('http://161.35.111.5/api/contacts/', {name, \r\n        email, subject, message})\r\n        .then(res=> {\r\n            setAlert('Message Sent', 'success');\r\n            setLoading(false);\r\n            console.log(res.data);\r\n            window.scrollTo(0,0)\r\n        })\r\n        .catch(errors=>{\r\n            setAlert('Error with Sending Message', 'error')\r\n            setLoading(false);\r\n            window.scrollTo(0,0)\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='contact'>\r\n            <Helmet>\r\n                <title>Realest Estate - Contact</title>\r\n                <meta name='description' content='Contact us' />\r\n            </Helmet>\r\n            <form className='contact__form' onSubmit={onSubmit}>\r\n                <label htmlFor=\"name\" className=\"contact__form__label\">Name*</label>\r\n                <input type=\"text\"name='name'placeholder='Full Name'onChange={onChange}\r\n                value={name} required className=\"contact__form__input\"/>\r\n                <label htmlFor=\"email\" className=\"contact__form__label\">Email*</label>\r\n                <input type=\"email\" name='email'placeholder='example@gmail.com' onChange={onChange}\r\n                value={email} required className=\"contact__form__input\"/>\r\n                <label htmlFor=\"subject\" className=\"contact__form__label\">Subject*</label>\r\n                <input type=\"text\" name='subject' placeholder='Buying Home'onChange={onChange}\r\n                value={subject} required className=\"contact__form__input\"/>\r\n                <label htmlFor=\"message\" className=\"contact__form__label\">Message*</label>\r\n                <textarea name='message' cols='30' row='10'\r\n                placeholder='Message:' onChange={onChange}\r\n                value={message} className=\"contact__form__textarea\"/>\r\n                {loading ? \r\n                <div className=\"contact__form__loading\">\r\n                    <Loader type=\"Oval\"\r\n                            color='#424242'\r\n                            height={50}\r\n                            width={50} />\r\n                </div> :\r\n                <button htmltype='submit' className=\"contact__form__button\">Send</button>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nContact.propTypes = {\r\n    setAlert: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {setAlert})(Contact)\r\n"],"sourceRoot":""}